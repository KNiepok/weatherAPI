// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"
import weatherapi "github.com/kniepok/weatherAPI"

// WeatherService is an autogenerated mock type for the WeatherService type
type WeatherService struct {
	mock.Mock
}

// AddBookmark provides a mock function with given fields: locationName
func (_m *WeatherService) AddBookmark(locationName string) error {
	ret := _m.Called(locationName)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(locationName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetBookmarks provides a mock function with given fields:
func (_m *WeatherService) GetBookmarks() ([]*weatherapi.Location, error) {
	ret := _m.Called()

	var r0 []*weatherapi.Location
	if rf, ok := ret.Get(0).(func() []*weatherapi.Location); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*weatherapi.Location)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStatistics provides a mock function with given fields: locationName
func (_m *WeatherService) GetStatistics(locationName string) (*weatherapi.Statistics, error) {
	ret := _m.Called(locationName)

	var r0 *weatherapi.Statistics
	if rf, ok := ret.Get(0).(func(string) *weatherapi.Statistics); ok {
		r0 = rf(locationName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*weatherapi.Statistics)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(locationName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetWeather provides a mock function with given fields: locationName
func (_m *WeatherService) GetWeather(locationName string) (*weatherapi.Weather, error) {
	ret := _m.Called(locationName)

	var r0 *weatherapi.Weather
	if rf, ok := ret.Get(0).(func(string) *weatherapi.Weather); ok {
		r0 = rf(locationName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*weatherapi.Weather)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(locationName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
